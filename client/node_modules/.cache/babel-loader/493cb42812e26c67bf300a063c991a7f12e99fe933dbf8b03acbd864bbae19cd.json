{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Git/spg-movie-app/client/src/pages/SearchMovies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { QUERY_ME } from '../utils/queries';\nimport { SAVE_MOVIE } from '../utils/mutations';\nimport { useQuery, useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { searchGoogleMovies } from '../utils/API';\nimport { saveMovieIds, getSavedMovieIds } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchMovies = () => {\n  _s();\n  const userData = useQuery(QUERY_ME);\n\n  // holding returned google api data\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  // holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // hold saved movieId values\n  const [savedMovieIds, setSavedMovieIds] = useState(getSavedMovieIds());\n  const [saveMovie] = useMutation(SAVE_MOVIE, {\n    refetchQueries: [{\n      query: QUERY_ME\n    }]\n  });\n  useEffect(() => {\n    return () => saveMovieIds(savedMovieIds);\n  });\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    if (!searchInput) {\n      return false;\n    }\n    try {\n      const response = await searchGoogleMovies(searchInput);\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n      const {\n        items\n      } = await response.json();\n      const movieData = items.map(movie => {\n        var _movie$volumeInfo$ima;\n        return {\n          movieId: movie.id,\n          authors: movie.volumeInfo.authors || ['No author to display'],\n          title: movie.volumeInfo.title,\n          description: movie.volumeInfo.description,\n          image: ((_movie$volumeInfo$ima = movie.volumeInfo.imageLinks) === null || _movie$volumeInfo$ima === void 0 ? void 0 : _movie$volumeInfo$ima.thumbnail) || '',\n          link: movie.volumeInfo.canonicalVolumeLink\n        };\n      });\n      setSearchedMovies(movieData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // function to handle saving a movie to our database\n  const handleSaveMovie = async movieId => {\n    // find the movie in `searchedMovies` state by the matching id\n    const movieToSave = searchedMovies.find(movie => movie.movieId === movieId);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      var _userData$data;\n      await saveMovie({\n        variables: {\n          userId: (_userData$data = userData.data) === null || _userData$data === void 0 ? void 0 : _userData$data.me._id,\n          authors: movieToSave.authors,\n          description: movieToSave.description,\n          movieId: movieToSave.movieId,\n          image: movieToSave.image,\n          link: movieToSave.link,\n          title: movieToSave.title\n        }\n      });\n      setSavedMovieIds([...savedMovieIds, movieToSave.movieId]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Search for Movies!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleFormSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 8,\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                name: \"searchInput\",\n                value: searchInput,\n                onChange: e => setSearchInput(e.target.value),\n                type: \"text\",\n                size: \"lg\",\n                placeholder: \"Search for a movie\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"success\",\n                size: \"lg\",\n                children: \"Submit Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: searchedMovies.length ? `Viewing ${searchedMovies.length} results:` : 'Search for a movie to begin'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: searchedMovies.map(movie => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [movie.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: movie.image,\n              alt: `The cover for ${movie.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: movie.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", movie.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: movie.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                disabled: savedMovieIds === null || savedMovieIds === void 0 ? void 0 : savedMovieIds.some(savedMovieId => savedMovieId === movie.movieId),\n                className: \"btn-block btn-info\",\n                onClick: () => handleSaveMovie(movie.movieId),\n                children: savedMovieIds !== null && savedMovieIds !== void 0 && savedMovieIds.some(savedMovieId => savedMovieId === movie.movieId) ? 'This movie has already been saved!' : 'Save this Movie!'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"google-link\",\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: movie.link,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: \"View in Google movies\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, movie.movieId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchMovies, \"pcQ9RZZWf7CBhhDOMe/oFKGjiCk=\", false, function () {\n  return [useQuery, useMutation];\n});\n_c = SearchMovies;\nexport default SearchMovies;\nvar _c;\n$RefreshReg$(_c, \"SearchMovies\");","map":{"version":3,"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","QUERY_ME","SAVE_MOVIE","useQuery","useMutation","Auth","searchGoogleMovies","saveMovieIds","getSavedMovieIds","SearchMovies","userData","searchedMovies","setSearchedMovies","searchInput","setSearchInput","savedMovieIds","setSavedMovieIds","saveMovie","refetchQueries","query","handleFormSubmit","event","preventDefault","response","ok","Error","items","json","movieData","map","movie","movieId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","canonicalVolumeLink","err","console","error","handleSaveMovie","movieToSave","find","token","loggedIn","getToken","variables","userId","data","me","_id","e","target","value","length","some","savedMovieId"],"sources":["/Users/mike/Git/spg-movie-app/client/src/pages/SearchMovies.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { QUERY_ME } from '../utils/queries';\nimport { SAVE_MOVIE } from '../utils/mutations';\nimport { useQuery, useMutation } from '@apollo/client';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleMovies } from '../utils/API';\nimport { saveMovieIds, getSavedMovieIds } from '../utils/localStorage';\n\nconst SearchMovies = () => {\n\n  const userData = useQuery(QUERY_ME);\n  \n  // holding returned google api data\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  // holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // hold saved movieId values\n  const [savedMovieIds, setSavedMovieIds] = useState(getSavedMovieIds());\n\n  const [saveMovie] = useMutation(SAVE_MOVIE, {\n    refetchQueries: [\n      {query: QUERY_ME}\n    ]\n  });\n\n\n  useEffect(() => {\n    return () => saveMovieIds(savedMovieIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleMovies(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const movieData = items.map((movie) => ({\n        movieId: movie.id,\n        authors: movie.volumeInfo.authors || ['No author to display'],\n        title: movie.volumeInfo.title,\n        description: movie.volumeInfo.description,\n        image: movie.volumeInfo.imageLinks?.thumbnail || '',\n        link: movie.volumeInfo.canonicalVolumeLink\n      }));\n\n      setSearchedMovies(movieData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // function to handle saving a movie to our database\n  const handleSaveMovie = async (movieId) => {\n    // find the movie in `searchedMovies` state by the matching id\n    const movieToSave = searchedMovies.find((movie) => movie.movieId === movieId);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveMovie({\n        variables: { \n          userId: userData.data?.me._id, \n          authors: movieToSave.authors, \n          description: movieToSave.description, \n          movieId: movieToSave.movieId, \n          image: movieToSave.image, \n          link: movieToSave.link, \n          title: movieToSave.title\n        }\n      });\n      setSavedMovieIds([...savedMovieIds, movieToSave.movieId]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Movies!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a movie'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedMovies.length\n            ? `Viewing ${searchedMovies.length} results:`\n            : 'Search for a movie to begin'}\n        </h2>\n        <CardColumns>\n          {searchedMovies.map((movie) => {\n            return (\n              <Card key={movie.movieId} border='dark'>\n                {movie.image ? (\n                  <Card.Img src={movie.image} alt={`The cover for ${movie.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{movie.title}</Card.Title>\n                  <p className='small'>Authors: {movie.authors}</p>\n                  <Card.Text>{movie.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveMovie(movie.movieId)}>\n                      {savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)\n                        ? 'This movie has already been saved!'\n                        : 'Save this Movie!'}\n                    </Button>\n                  )}\n                  <div className='google-link'>\n                    <a href={movie.link} target='_blank' rel='noopener noreferrer'>View in Google movies</a>\n                  </div>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchMovies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}